#!/usr/bin/env php
<?php

$options = getopt('c:s:t:a:', ['conf:', 'sql:', 'task:', 'args:']);
$conf = $options['c'] ?? $options['conf'] ?? null;
$sql  = $options['s'] ?? $options['sql']  ?? null;
$args = $options['a'] ?? $options['args'] ?? '';
$task = $options['t'] ?? $options['task'] ?? '';

if (is_null($conf)) {
	echo 'INI file not specified!' . PHP_EOL;
	exit(1);
}

if (is_null($sql)) {
	echo 'SQL directory not specified!' . PHP_EOL;
	exit(1);
}

if (!file_exists($conf)) {
	echo 'INI file not found: ' . $conf . PHP_EOL;
	exit(2);
}

if (!file_exists($sql)) {
	echo 'SQL directory not found: ' . $sql . PHP_EOL;
	exit(2);
}

$db = parse_ini_file($conf);

if (!$db) {
	echo 'An error occurred during the INI file parsing!' . PHP_EOL;
	exit(3);
}

$sudo = trim(exec('id -nG "$USER" | grep -qw docker && echo sudo'));

$network = system("$sudo docker container inspect -f '{{.State.Running}}' " . $db['host']) === 'true' ? '--network container:' . $db['host'] : '';

$cmd = $sudo . ' docker run --pull always ' . $network . ' --rm -v ' . realpath($sql) . ':/flyway/sql flyway/flyway:latest -url=jdbc:mysql://' . $db['host'] . ':' . $db['port'] . ' -user=' . escapeshellarg($db['username']) . ' -password=' . escapeshellarg($db['password']) . ' -schemas=' . escapeshellarg($db['dbname']) . ' ' . $args . ' ' . $task;
passthru($cmd);